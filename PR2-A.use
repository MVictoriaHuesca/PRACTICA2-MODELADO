model coches

-----------Enumerados-----------------
enum TipoRevision {
    mantenimiento,
    reparacion
}
-----------Fin de enumerados----------

------------Clases----------------
class Clock
 attributes
    NOW : Integer init = 0 -- POSIX representation starting at 0
    resolution: Integer init = 1 
end

class Ciudad
end

class Coche
   attributes
      fechaMatriculacion : Integer 
      kmRecorridos : Real derive: 
        self.viaje->select(v | not v.fechaLlegada.oclIsUndefined())->collect(v | v.km)->sum();

      necesitaMantenimiento: Boolean derive: 
         if self.fechaMatriculacion + 400 >= Clock.allInstances()->any(true).NOW then  -- 
            false
         else
            let ultimaRevision: Revision = self.revision->select(r | r.tipo = TipoRevision::mantenimiento)->sortedBy(r | r.fechaFin)->last() in
               if ultimaRevision.oclIsUndefined() then true
               else Clock.allInstances()->any(true).NOW >= ultimaRevision.fechaFin + 100
               endif
         endif;

      enGarantia : Boolean derive:
         if self.fechaMatriculacion + 400 >= Clock.allInstances()->any(true).NOW then
            true
         else
            self.revision->exists(r |
               r.taller.oclIsTypeOf(TallerOficial) and 
               Clock.allInstances()->any(true).NOW <= r.fechaFin + r.taller.oclAsType(TallerOficial).tiempoGarantia
            )
         endif;
end

associationclass Conexion between   
   Ciudad [0..*] role ciudadOrigen  
   Ciudad [0..*] role ciudadDestino
   attributes
      kmDistancia : Real
end

class Viaje
   attributes
      fechaSalida : Integer
      fechaLlegada : Integer
      km : Real derive:
         let conexion : Conexion = Conexion.allInstances()->any(c | 
            c.ciudadOrigen = self.ciudadViajeOrigen and c.ciudadDestino = self.ciudadViajeDestino)
        in conexion.kmDistancia
end

class Revision 
   attributes
      fechaInicio : Integer
      fechaFin : Integer
      tipo : TipoRevision
end

class Taller
end 

class TallerOficial < Taller
   attributes
      tiempoGarantia : Integer
end
-------------Fin de Clases--------



----------Asociaciones---------------
association CocheEnCiudad between
    Coche [0..*]   role coche      -- Una ciudad puede albergar indeterminados coches
    Ciudad [0..1]  role ciudad    -- Un coche solo puede estar en una ciudad (si no se encuentra viajando)
end

association ViajeCiudadOrigen between 
   Viaje[0..*] role viajeOrigen  -- Una ciudad origen puede estar asociada o no a varios viajes
   Ciudad [1] role ciudadViajeOrigen  -- Un viaje tiene que estar asociado a una ciudad
end

association ViajeCiudadDestino between 
   Viaje[0..*] role viajeDestino -- Una ciudad destino puede estar asociada o no a varios viajes
   Ciudad [1] role ciudadViajeDestino -- Un viaje tiene que estar asociado a una ciudad
end 

association CocheViaje between
   Coche[1] role coche  -- Un viaje es realizado por un coche
   Viaje [0..*] role viaje   --Un coche puede haber realizado ninguno o varios viajes
end

association TallerEnCiudad between
   Taller[0..*] role taller -- Una ciudad puede albergar indeterminados talleres
   Ciudad[1] role ciudad -- Un taller está en una ciudad
end

association CocheEnRevision between 
   Coche[1] role coche -- Una revisión se realiza a un solo coche
   Revision[0..*] role revision -- Un coche puede haber tenido ninguna o varias revisiones
end

association RevisionEnTaller between
   Revision[*] role revision  -- Un taller puede realizar muchas revisiones
   Taller[1] role taller   -- Una revisión se realiza en un solo taller
end
----------Fin de Asociaciones-------------



-----------Invariantes---------
constraints

context Conexion
   -- Cada ciudad debe estar al menos a 5km de distancia de otra        
   inv DistanciaMinima: 
      self.kmDistancia >= 5
   
   -- Una conexión debe ser entre 2 ciudades diferentes  
   inv ConexionCiudadesDiferentes:
      self.ciudadOrigen <> self.ciudadDestino
   
context Ciudad
   -- En cada ciudad habrá, a lo sumo, un taller oficial.     
   inv UnicoTallerOficial: 
      self.taller->select(t | t.oclIsTypeOf(TallerOficial))->size() <= 1

context Coche      
   -- Un coche se encontrará en todo momento bien realizando un solo viaje determinado o bien en una ciudad.   
   inv CocheViajandoOEnCiudad:
      (self.ciudad.oclIsUndefined() and self.viaje->select(v | v.fechaLlegada.oclIsUndefined())->size() = 1) or 
      (not self.ciudad.oclIsUndefined() and self.viaje->forAll(v | not v.fechaLlegada.oclIsUndefined()))


   -- Solo una revisión en un momento dado  ¿sería precondición?    
   inv RevisionUnica:
      self.revision->select(r | r.fechaFin.oclIsUndefined())->size() <= 1
   
   
   -- Un coche debe estar en la ciudad en la que acabó su último viaje si no está viajando y ha realizado al menos un viaje
   inv CocheCiudadUltimoViaje:
      self.viaje->size()>0 and not self.ciudad.oclIsUndefined() implies 
      self.ciudad = self.viaje->sortedBy(fechaLlegada)->last().ciudadViajeDestino


   -- Las revisiones no pueden solaparse en el tiempo !!!
   inv CoherenciaRevisiones: 
      self.revision->sortedBy(r | r.fechaInicio)->forAll(r1, r2 | r1 <> r2 implies r1.fechaInicio <= r2.fechaFin)
   

context Viaje
   
   -- Ciudad destino y origen de un viaje deben ser diferentes
   inv ViajeCiudadesDistintas:
      self.ciudadViajeOrigen <> self.ciudadViajeDestino

   -- La fecha de llegada de un viaje debe ser posterior a la de salida
   inv FechaLlegadaPosteriorFechaSalida:
      not self.fechaLlegada.oclIsUndefined() implies self.fechaLlegada > self.fechaSalida


context Revision

   --Todas las revisiones deben tener lugar después de que el coche se matriculase.
   inv RevisionPosteriorAMatriculacion: 
      self.coche.fechaMatriculacion <= self.fechaInicio

   -- Si un coche está siendo sometido a una revisión, entonces el coche debe encontrarse en la misma ciudad donde está el taller.
   inv RevisionMismaCiudadCoche:      
      self.fechaFin.oclIsUndefined() implies self.taller.ciudad = self.coche.ciudad 

   -- ¿la fecha de inicio de una revisión debe ser anterior a la de fin?
   inv FechaInicioAntesFechaFin:
      not self.fechaFin.oclIsUndefined() implies self.fechaInicio <= self.fechaFin


-----------Fin Invariantes---------


--------------PREGUNTAS-------------------

---------------------------------------------

--   ¿Hay que hacer invariante que compruebe que el tipo de revisión es o de mantenimiento o de reparación (es decir no
--   es undefined?
--   ¿El invariante coherenciaViajes no se modelaria como precondición para iniciar un viaje?
--   ¿El invariante RevisionUnica no se modelaria como precondición para iniciar una revisión?
--   ¿solo un viaje en un momento dado no se modelaria como precondición para iniciar un viaje?
--   ¿También haría falta el invariante coherenciaRevisiones?
--   ¿Hay que añadir el atributo velocidad en el apartado a?